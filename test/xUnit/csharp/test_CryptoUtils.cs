using System;
using System.Management.Automation.Internal;
using System.Text;
using Xunit;

namespace PSTests.Parallel
{
    public static class CryptoUntilsTests
    {
        [Fact]
        public static void TestSessionKeyExchangeCoreClientToWin32Server()
        {
            using (var coreCryptoClient = CorePSRSACryptoServiceProvider.GetRSACryptoServiceProviderForClient())
            using (var win32CryptoServer = Win32PSRSACryptoServiceProvider.GetRSACryptoServiceProviderForServer())
            {
                /*
                 * Key Exchange
                 */

                // generate, export, import public key
                coreCryptoClient.GenerateKeyPair();  // public key generated by client
                string publicKey = coreCryptoClient.GetPublicKeyAsBase64EncodedString();
                win32CryptoServer.ImportPublicKeyFromBase64EncodedString(publicKey); // sent to and imported by server

                // generate, export, import session key 
                win32CryptoServer.GenerateSessionKey();   // server provides the session key?
                string sessionKey = win32CryptoServer.SafeExportSessionKey();
                coreCryptoClient.ImportSessionKeyFromBase64EncodedString(sessionKey);


                /*
                 * Pass an encrypted message
                 */
                
                // encrypt
                byte[] plainText = Encoding.UTF8.GetBytes("here is a message");
                byte[] cipherText = coreCryptoClient.EncryptWithSessionKey(plainText);

                // decrypt
                byte[] decrypt = win32CryptoServer.DecryptWithSessionKey(cipherText);

                /*
                 * Assert
                 */
                Assert.Equal(plainText, decrypt);
            }
        }

        [Fact]
        public static void TestSessionKeyExchangeCoreServerToWin32Client()
        {
            using (var win32CryptoClient = Win32PSRSACryptoServiceProvider.GetRSACryptoServiceProviderForClient())
            using (var coreCryptoServer = CorePSRSACryptoServiceProvider.GetRSACryptoServiceProviderForServer())
            {
                /*
                 * Key Exchange
                 */

                // generate, export, import public key
                win32CryptoClient.GenerateKeyPair();
                string publicKey = win32CryptoClient.GetPublicKeyAsBase64EncodedString();
                coreCryptoServer.ImportPublicKeyFromBase64EncodedString(publicKey);

                // generate, export, import session key 
                coreCryptoServer.GenerateSessionKey();
                string sessionKey = coreCryptoServer.SafeExportSessionKey();
                win32CryptoClient.ImportSessionKeyFromBase64EncodedString(sessionKey);


                /*
                 * Pass an encrypted message
                 */
                
                // encrypt
                byte[] plainText = Encoding.UTF8.GetBytes("here is a message");
                byte[] cipherText = win32CryptoClient.EncryptWithSessionKey(plainText);

                // decrypt
                byte[] decrypt = coreCryptoServer.DecryptWithSessionKey(cipherText);

                /*
                 * Assert
                 */
                Assert.Equal(plainText, decrypt);
            }
        }
    }
}
